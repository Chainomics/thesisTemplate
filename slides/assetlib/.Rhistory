plot.trxvol <- function(){
data.trxvol <- read.csv("trxvol.csv",sep=",")
plot(ts(data.trxvol[,3]/1000000,freq=365,start=c(2009,3)),ylab="Transaktionsvolumen in Mio. Bitcoin pro Tag", xlab="Zeit", col="blue")#,log="y")
abline(0,0,lty=3,lwd=1.5)
abline(1,0,lty=3,lwd=1.5)
abline(2,0,lty=3,lwd=1.5)
abline(3,0,lty=3,lwd=1.5)
abline(4,0,lty=3,lwd=1.5)
abline(5,0,lty=3,lwd=1.5)
#abline(6,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
}
### Plot der Kosten pro Transaktion
plot.trxcost <- function(){
data.trxcost <- read.csv("trxcost.csv",sep=",")
plot(ts(data.trxcost[,3],freq=365,start=c(2009,3)),ylab="Durchschnittliche Kosten pro Transaktion in USD", xlab="Zeit", col="blue")#,log="y")
abline(0,0,lty=3,lwd=1.5)
#abline(10,0,lty=3,lwd=1.5)
abline(20,0,lty=3,lwd=1.5)
#abline(30,0,lty=3,lwd=1.5)
abline(40,0,lty=3,lwd=1.5)
#abline(50,0,lty=3,lwd=1.5)
abline(60,0,lty=3,lwd=1.5)
#abline(70,0,lty=3,lwd=1.5)
abline(80,0,lty=3,lwd=1.5)
#abline(90,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
}
### Plot der Gebühren/Gesamtkosten Ratio von Transaktionen
plot.trxcostratio <- function(){
data.price <- read.csv("price.csv",sep=",")
data.trx <- read.csv("trx.csv",sep=",")
data.trxcost <- read.csv("trxcost.csv",sep=",")
data.trxfees <- read.csv("trxfees.csv",sep=",")
data.trxfeesusd <- (data.price[,3]*data.trxfees[,3])/data.trx[,3]
plot(ts(data.trxfeesusd/pmax(data.trxcost[,3],0.0000001),freq=365,start=c(2009,4)),ylab="Gebührenanteil an Gesamtkosten einer Transaktion", xlab="Zeit", col="blue")
abline(0,0,lty=3,lwd=1.5)
#abline(0.1,0,lty=3,lwd=1.5)
abline(0.02,0,lty=3,lwd=1.5)
#abline(0.3,0,lty=3,lwd=1.5)
abline(0.04,0,lty=3,lwd=1.5)
#abline(0.5,0,lty=3,lwd=1.5)
abline(0.06,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
}
### Plot des Transaktionsvolumens in USD
plot.trxvolusd <- function(){
data.trxvol <- read.csv("trxvol.csv",sep=",")
data.price <- read.csv("price.csv",sep=",")
plot(ts(data.trxvol[,3]*data.price[,3]/1000000,freq=365,start=c(2009,3)),ylab="Transaktionsvolumen in Mio. USD pro Tag", xlab="Zeit", col="blue")#,log="y")
abline(0,0,lty=3,lwd=1.5)
abline(100,0,lty=3,lwd=1.5)
abline(200,0,lty=3,lwd=1.5)
abline(300,0,lty=3,lwd=1.5)
abline(400,0,lty=3,lwd=1.5)
abline(500,0,lty=3,lwd=1.5)
#abline(6,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
}
### Plot des Difficulty Parameters
plot.diff <- function(){
data.diff <- read.csv("diff.csv",sep=",")
plot(ts(data.diff[,3],freq=365,start=c(2009,4)),ylab="Difficulty Parameter", xlab="Zeit", col="blue")
}
### Plot CPI
plot.cpi <- function(){
data.cpi.usa <- read.csv("cpi_usa.csv",sep=";")
data.cpi.swi <- read.csv("cpi_swi.csv",sep=";")
data.cpi.gbp <- read.csv("cpi_gbp.csv",sep=";")
data.gold <- read.csv("gold.csv",sep=";")
plot(ts((data.cpi.usa[,4])/100,freq=4,start=c(1955,1)),ylab="CPI normalisiert 1955 Preisniveau = 1", xlab="Zeit", col="black",ylim=range(0:20),lwd=1.5)#13.53345
lines(ts((data.cpi.swi[,3]/100),freq=12,start=c(1955,1)), col="blue", lty = 1,lwd=1.5)
lines(ts((data.cpi.gbp[,3]/100),freq=4,start=c(1955,1)), col="gray", lty = 1,lwd=1.5)
lines(ts((data.gold[,7]/100),freq=4,start=c(1955,1)), col="black",lty = 2,lwd=1.5)
abline(1,0,lty=3,lwd=1.5)
abline(5,0,lty=3,lwd=1.5)
abline(10,0,lty=3,lwd=1.5)
abline(15,0,lty=3,lwd=1.5)
abline(20,0,lty=3,lwd=1.5)
abline(v=1960,lty=3,lwd=1.5)
abline(v=1970,lty=3,lwd=1.5)
abline(v=1980,lty=3,lwd=1.5)
abline(v=1990,lty=3,lwd=1.5)
abline(v=2000,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
legend('topleft',
c("USD","GBP","CHF","Gold"),
lty=c(1,1,1,2),
lwd=c(2.5,2.5,2.5,2.5),col=c("black","gray","blue","black"),bg="white")
}
plot.price()
plot.trx()
plot.trx()
plot.price()
a <- 40
is.numeric(a)
i <- 0
is.numeric(i)
t <- 0
is.numeric(t)
r <- 50*0.052560
is.numeric(r)
btc <- 0
is.vector(btc)
y <- 2009
is.vector(y)
while(t < a){
i = i+1
t = t+1
if(i>4){
i <- 1
r <- r/2
}
btc[t+1] <- btc[t]+r
y[t+1] <- y[t]+1
}
#plot(y,btc, type="l", col="blue",xlab="Year",ylab="Mio. bitcoins in circulation")
plot.trxvol()
plot.trxvolusd()
plot.movingvol()
plot.price()
n <- 16
x <- c(1:n)
y <- x
i <- 1
for(i in 1:length(x)){
y[i] <- (x[i]*(x[i]-1))/2
}
plot(x,y,type="o",xlab="Anzahl Güter und Dienstleistungen n",ylab="Mögliche Tauschpaarungen",col="black",xlim=c(0,n))
lines(x,x-1,type="o",col="blue")
text(0.8*n,0.9*max(y),"Ohne Geld")
text(0.95*n,1.5*n,"Mit Geld",col="blue")
abline(h=0,lty=3,lwd=1.5)
abline(h=20,lty=3,lwd=1.5)
abline(h=40,lty=3,lwd=1.5)
abline(h=60,lty=3,lwd=1.5)
abline(h=80,lty=3,lwd=1.5)
abline(h=100,lty=3,lwd=1.5)
abline(h=120,lty=3,lwd=1.5)
abline(v=0,lty=3,lwd=1.5)
abline(v=5,lty=3,lwd=1.5)
abline(v=10,lty=3,lwd=1.5)
abline(v=15,lty=3,lwd=1.5)
plot.price()
plot.trxvolusd()
plot.price()
a <- 40
is.numeric(a)
i <- 0
is.numeric(i)
t <- 0
is.numeric(t)
r <- 50*0.052560
is.numeric(r)
btc <- 0
is.vector(btc)
y <- 2009
is.vector(y)
while(t < a){
i = i+1
t = t+1
if(i>4){
i <- 1
r <- r/2
}
btc[t+1] <- btc[t]+r
y[t+1] <- y[t]+1
}
#plot(y,btc, type="l", col="blue",xlab="Year",ylab="Mio. bitcoins in circulation")
#### Parameter
pop <- 6.35 * 10^9
crit_key <- 6.35*10^24
gpu_keys_sec <- 60*10^9
deskt_keys_sec <- 10^5
#### Berechnung der Dauer bis Kollision erwartet wird
crit_t_sec <- crit_key/(pop*deskt_keys_sec)
crit_t_yrs <- crit_t_sec/3600/24/365
#### Berechnung des gesamthaft benötigten Speicherplatzes
tot_storage_bytes <- 52*crit_key
tot_storage_tb <- tot_storage_bytes/1000/1000/1000/1000
#### Berechnung pro Person
pp_storage_tb <- tot_storage_tb/pop
pp_storage_tb
# Kontrolle Berechnung pro Person
crit_t_sec*deskt_keys_sec*52/1000/1000/1000/1000
require(digest)
m1 = "Die Transaktionen A und C sind gültig."
m2 = "Die Transaktionen A und B sind gültig."
H1 = digest(m1,"sha256")
H2 = digest(m2,"sha256")
require(digest)
v1 = "Versuch 1"
v2 = "Versuch 2"
v3 = "Versuch 3"
v4 = "Versuch 4"
v5 = "Versuch 5"
Hv1 = digest(v1,"sha256")
Hv2 = digest(v2,"sha256")
Hv3 = digest(v3,"sha256")
Hv4 = digest(v4,"sha256")
Hv5 = digest(v5,"sha256")
data.price <- read.csv("price.csv",sep=",")
data.blockchain <- read.csv("blockchain.csv",sep=",")
blockchain_size_mb <- round(max(data.blockchain[,3]),0)
blockchain_size_gb <- round(max(data.blockchain[,3])/1024,0)
price_current <- data.price[length(data.price[,3]),3]
plot(y,btc, type="l", col="blue",xlab="Jahr",ylab="Menge aller Bitcoin Einheiten", cex=0.2, xlim = c(2009,2040))
abline(0,0,lty=3,lwd=1.5)
abline(5,0,lty=3,lwd=1.5)
abline(10,0,lty=3,lwd=1.5)
abline(15,0,lty=3,lwd=1.5)
abline(20,0,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2020,lty=3,lwd=1.5)
abline(v=2025,lty=3,lwd=1.5)
abline(v=2030,lty=3,lwd=1.5)
abline(v=2035,lty=3,lwd=1.5)
abline(v=2040,lty=3,lwd=1.5)
plot(y,btc, type="l", col="blue",xlab="Jahr",ylab="Menge aller Bitcoin Einheiten", cex=0.2, xlim = c(2009,2040))
abline(0,0,lty=3,lwd=1.5)
abline(5,0,lty=3,lwd=1.5)
abline(10,0,lty=3,lwd=1.5)
abline(15,0,lty=3,lwd=1.5)
abline(20,0,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2020,lty=3,lwd=1.5)
abline(v=2025,lty=3,lwd=1.5)
abline(v=2030,lty=3,lwd=1.5)
abline(v=2035,lty=3,lwd=1.5)
abline(v=2040,lty=3,lwd=1.5)
plot.trxvol()
plot.cpi()
plot.blockchainsize()
]32*4
]32*4
32*4
64*4
nchar(000000342bb08fa10ea042f4a6ce3b140c390f997816b7f353ddd806ac5db1ec)
nchar("000000342bb08fa10ea042f4a6ce3b140c390f997816b7f353ddd806ac5db1ec")
nchar("ae21f25523ae1d4eae1d4e3864583d2b99d27bfc4cf00dbf6281951aff01fe809e9534")
nchar("ae21f25523ae1d4ec4cf00dbf6281951aff01fe809e9534")
nchar(" 9defd33fb0e4ae403864583d2b99d27bfc4cf00dbf6281951aff01fe809e9534")
nchar("9defd33fb0e4ae403864583d2b99d27bfc4cf00dbf6281951aff01fe809e9534")
nchar("ae21f25523ae1d4e3864583d2b99d27bfc4cf00dbf6281951aff01fe809e9534")
nchar("0000004d250db91fa626d0ca82800c8fc02532caadc39ba23497afdf5bb2266f")
12.3*1800
15.3*1800
15.3*1847
47*12.3
210000/(6*24*365)
1/1
1/2
1/3
1/4
1/5
sd(c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12.5))
sd(c(0,0,0,0,0,0,0,0,0,0,0,0,0,12.5/3,12.5/3,12.5/3))
12.5/16
3716
3/16
(3/16)*(3/16)
16*16
16*16/9
(3/16)*(3/16)
(3/16)
16*16
16*16-9
247/256
25*(97256)
25*(9/256)
13*13
13*3
13*13+39+39+9
169+39*12.5+39*12.5+9*25
(169+39*12.5+39*12.5+9*25)/256
3/16*12.5
3/16*12.5*2
3/16*12.5*2
(39/256*12.5+39/256*12.5+9/256*25)
(39/256*12.5+39/256*12.5+9/256*25)
(169+39*12.5+39*12.5+9*25)/256
(39/256*12.5+39/256*12.5+9/256*25)
0.4^2*(37.5)
0.4*12.5
0.3*12.5
0.3^2*(37.5)
0.4*12.5
0.4^2*(37.5)
plot(3x^2)
plot(3*x^2)
line(2*x)
lines(3*x^2)
lines(2*x)
(3*0.5^2)
(2*0.5)
(3*0.6^2)
(2*0.6)
(2*0.6666)
(3*0.6666^2)
0.66666*0.66666
3/16*2*12.5
(3/16)*(3/16)*12.5*3
16*16
8700/73.90
26*6*24
25*6*24
25*6*24*365*480
9*1850
6600*0.9875
6600*0.9875+400
View(data.blockchain)
0.4*1.5
0.3*1.5
464/570
1.5+2.25+1.75+1.5+0.5
1.5+2.25*0.2+1.75*0.3+1.5*0.625
1.5+2.25*0.2+0
1.5+2.25*0.2+1.75*0.3+1.5*0.625
1.5+2.25*1+1.75*1+1.5*1
365/4
365/4*40
30/4*40
2000+711+282+282+300+100+1000
6768*2
6768*2*2*5
12000*1.005
12000*1.005
120000*1.005
30/4
30/4*40
4794/12
180+50+70+160+180
1000-640
360/50
180+50+70+160+180
360/50
7*50
48+26+8+26
4*4*8
52*7
52*3
/2
156/2
156/2*25
netsuite <- c(36,43,37,45,19)
sum(netsuite)
180/8*1500
4*365*8
data.price <- read.csv("../data/price.csv",sep=",")
plot(ts(data.price[,3],freq=365,start=c(2009,4)),ylab="Preis in USD", xlab="Zeit", col="blue")
abline(0,0,lty=3,lwd=1.5)
abline(400,0,lty=3,lwd=1.5)
abline(200,0,lty=3,lwd=1.5)
abline(1000,0,lty=3,lwd=1.5)
abline(800,0,lty=3,lwd=1.5)
abline(600,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2017,lty=3,lwd=1.5)
data.price <- function(){
read.csv("../data/price.csv",sep=",")
plot(ts(data.price[,3],freq=365,start=c(2009,4)),ylab="Preis in USD", xlab="Zeit", col="blue")
abline(0,0,lty=3,lwd=1.5)
abline(200,0,lty=3,lwd=1.5)
abline(400,0,lty=3,lwd=1.5)
abline(600,0,lty=3,lwd=1.5)
abline(800,0,lty=3,lwd=1.5)
abline(1000,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
abline(v=2017,lty=3,lwd=1.5)
}
data.price
data.price
source("../assetlib/scripts/priceplot.R")
setwd("C:\Users\Fabian\Documents\GitHub\BitcoinVorlesung\vorlesung\master\assetlib")
setwd("C://Users/Fabian/Documents/GitHub/BitcoinVorlesung/vorlesung/master/assetlib")
source("../assetlib/scripts/priceplot.R")
file.path
file.path()
file.path
file.path(priceplot.r)
dir
dir(wd)
file.path(wd)
file.path(data.price)
setwd("C://Users/Fabian/Documents/GitHub/BitcoinVorlesung/vorlesung/master/assetlib")
dir
priceplot.R
setwd("C://Users/Fabian/Documents/GitHub/BitcoinVorlesung/vorlesung/master/assetlib")
priceplot.R
source("../assetlib/scripts/priceplot.R")
setwd("C://Users/Fabian/Documents/GitHub/BitcoinVorlesung/vorlesung/master/assetlib")
source("../assetlib/scripts/priceplot.R")
dir(wd)
wd
dir("C://Users/Fabian/Documents/GitHub/BitcoinVorlesung/vorlesung/master/assetlib")
dir("C://Users/Fabian/Documents/GitHub/BitcoinVorlesung/vorlesung/master/assetlib/scripts")
source(‘~/.active-rstudio-document’)
source("~/.active-rstudio-document")
source(~/.active-rstudio-document)
source('~/.active-rstudio-document')
pathnames <- list.files(pattern="[.]R$", path="R/", full.names=TRUE);
sapply(pathnames, FUN=source);
pathnames <- list.files(pattern="[.]R$", path="C://", full.names=TRUE);
sapply(pathnames, FUN=source);
install.packages("utility")
sourceDirectory()
library("utility")
sourceDirectory()
sourcedirectory()
sourcedirectory?
?source
source("../assetlib/scripts/priceplot.R")
source("../assetlib/scripts/priceplot.R")
source("C://Users/Fabian/Documents/GitHub/BitcoinVorlesung/vorlesung/master/assetlib/scripts/priceplot.R")
priceplot <- function(){
data.price <- read.csv("../data/price.csv",sep=",")
plot(ts(data.price[,3],freq=365,start=c(2009,4)),ylab="Preis in USD", xlab="Zeit", col="blue")
abline(0,0,lty=3,lwd=1.5)
abline(200,0,lty=3,lwd=1.5)
abline(400,0,lty=3,lwd=1.5)
abline(600,0,lty=3,lwd=1.5)
abline(800,0,lty=3,lwd=1.5)
abline(1000,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
abline(v=2017,lty=3,lwd=1.5)
}
priceplot
data.price <- read.csv("../data/price.csv",sep=",")
plot(ts(data.price[,3],freq=365,start=c(2009,4)),ylab="Preis in USD", xlab="Zeit", col="blue")
abline(0,0,lty=3,lwd=1.5)
abline(200,0,lty=3,lwd=1.5)
abline(400,0,lty=3,lwd=1.5)
abline(600,0,lty=3,lwd=1.5)
abline(800,0,lty=3,lwd=1.5)
abline(1000,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
abline(v=2017,lty=3,lwd=1.5)
read.csv("../data/price.csv",sep=",")
plot(ts(data.price[,3],freq=365,start=c(2009,4)),ylab="Preis in USD", xlab="Zeit", col="blue")
abline(0,0,lty=3,lwd=1.5)
abline(200,0,lty=3,lwd=1.5)
abline(400,0,lty=3,lwd=1.5)
abline(600,0,lty=3,lwd=1.5)
abline(800,0,lty=3,lwd=1.5)
abline(1000,0,lty=3,lwd=1.5)
abline(v=2009,lty=3,lwd=1.5)
abline(v=2010,lty=3,lwd=1.5)
abline(v=2011,lty=3,lwd=1.5)
abline(v=2012,lty=3,lwd=1.5)
abline(v=2013,lty=3,lwd=1.5)
abline(v=2014,lty=3,lwd=1.5)
abline(v=2015,lty=3,lwd=1.5)
abline(v=2016,lty=3,lwd=1.5)
abline(v=2017,lty=3,lwd=1.5)
